//   C18 runtime startup code used by the Embed Inc PIC development environment
//   for mixed MPASM and C18 projects.  This version was modified from the
//   standard C018I.C module supplied by Microchip with version 3.11 of the C18
//   compiler.
//
//   The following modifications were made from the Microchip version:
//
//   1 - Made into subroutine C18_INIT instead of starting from the reset.
//       The assembler STRT module owns the reset vector and calls C18_INIT
//       before any modules written in C.
//
//   2 - References to MAIN removed.  This is no longer needed since the init
//       function is now a subroutine called from the assembler STRT module.
//
//   3 - Code at reset vector removed.
//
//   4 - Stack initialization removed.  The call and data stacks are set up
//       by the STRT module before C18_INIT is called.
//


/* $Id: c018i.c,v 1.7 2006/11/15 22:53:12 moshtaa Exp $ */

/* Copyright (c)1999 Microchip Technology */

/* MPLAB-C18 startup code, including initialized data */

/* external reference to __init() function */
extern void __init (void);

/* prototype for the initialized data setup */
void _do_cinit (void);

extern volatile near unsigned long short TBLPTR;
extern near unsigned FSR0;
extern near char __FPFLAGS;
#define RND 6

void C18_INIT (void) {            //C18 runtime init, called from STRT module
  _asm
    clrf TBLPTRU, 0               // 1st silicon doesn't do this on POR
    bcf __FPFLAGS, RND, 0         // Initialize rounding flag for floating point libs
    _endasm
  _do_cinit ();

  // If user defined __init is not found, the one in clib.lib will be used
  __init ();
  }                               //end of C18_INIT


/* MPLAB-C18 initialized data memory support */
/* The linker will populate the _cinit table */
extern far rom struct
{
  unsigned short num_init;
  struct _init_entry
  {
    unsigned long from;
    unsigned long to;
    unsigned long size;
  }
  entries[];
}
_cinit;

#pragma code _cinit_scn
void
_do_cinit (void)
{
  /* we'll make the assumption in the following code that these statics
   * will be allocated into the same bank.
   */
  static short long prom;
  static unsigned short curr_byte;
  static unsigned short curr_entry;
  static short long data_ptr;

  // Initialized data...
  TBLPTR = (short long)&_cinit;
  _asm
    movlb data_ptr
    tblrdpostinc
    movf TABLAT, 0, 0
    movwf curr_entry, 1
    tblrdpostinc
    movf TABLAT, 0, 0
    movwf curr_entry+1, 1
  _endasm
    //while (curr_entry)
    //{
    test:
    _asm
     bnz 3
    tstfsz curr_entry, 1
    bra 1
    _endasm
    goto done;
      /* Count down so we only have to look up the data in _cinit
       * once.
       *
       * At this point we know that TBLPTR points to the top of the current
       * entry in _cinit, so we can just start reading the from, to, and
       * size values.
       */
      _asm
  /* read the source address */
  tblrdpostinc
  movf TABLAT, 0, 0
  movwf prom, 1
  tblrdpostinc
  movf TABLAT, 0, 0
  movwf prom+1, 1
  tblrdpostinc
  movf TABLAT, 0, 0
  movwf prom+2, 1
  /* skip a byte since it's stored as a 32bit int */
  tblrdpostinc
  /* read the destination address directly into FSR0 */
  tblrdpostinc
  movf TABLAT, 0, 0
  movwf FSR0L, 0
  tblrdpostinc
  movf TABLAT, 0, 0
  movwf FSR0H, 0
  /* skip two bytes since it's stored as a 32bit int */
  tblrdpostinc
  tblrdpostinc
  /* read the destination address directly into FSR0 */
  tblrdpostinc
  movf TABLAT, 0, 0
  movwf curr_byte, 1
  tblrdpostinc
  movf TABLAT, 0, 0
  movwf curr_byte+1, 1
  /* skip two bytes since it's stored as a 32bit int */
  tblrdpostinc
  tblrdpostinc
      _endasm
      //prom = data_ptr->from;
      //FSR0 = data_ptr->to;
      //curr_byte = (unsigned short) data_ptr->size;
      /* the table pointer now points to the next entry. Save it
       * off since we'll be using the table pointer to do the copying
       * for the entry.
       */
      data_ptr = TBLPTR;

      /* now assign the source address to the table pointer */
      TBLPTR = prom;

      /* do the copy loop */
      _asm
        // determine if we have any more bytes to copy
  movlb curr_byte
  movf curr_byte, 1, 1
copy_loop:
  bnz 2                           // copy_one_byte
  movf curr_byte + 1, 1, 1
  bz 7                            // done_copying

copy_one_byte:
  tblrdpostinc
  movf TABLAT, 0, 0
  movwf POSTINC0, 0

  // decrement byte counter
  decf curr_byte, 1, 1
  bc -8                           // copy_loop
        decf curr_byte + 1, 1, 1
  bra -7                          // copy_one_byte

done_copying:

      _endasm
      /* restore the table pointer for the next entry */
      TBLPTR = data_ptr;
      /* next entry... */
      curr_entry--;
      goto test;
done:
;
}
