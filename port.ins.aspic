;   ***************************************************************
;   * Copyright (C) 2005, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   Subroutine PORT_INIT
;
;   Initialize the I/O ports as used by the rest of the system.
;
.port    code

         glbsub  port_init, noregs
;
;   Disable the A/D inputs so that they become digital I/O lines if this
;   processor has an A/D.  If the A/D is used, it will be set up by a
;   module for that purpose later.
;
  ifdef adcon0
         dbankif adcon0
         clrf    adcon0      ;make sure the A/D module is off
    endif

  ifdef adcon1
         dbankif adcon1
    ifdef adcon2             ;enhanced A/D with separate config bits ?
      ifdef vcfg0
         movlw   b'00001111' ;set just the PCFGx bits
        else
         movlw   b'11111111' ;set all possible channels to digital I/O
        endif
      else                   ;normal 16 family type A/D
         movlw   b'00000110'
                 ; XXXX----  don't matter if disabling the A/D
                 ; ----0110  no A/D inputs, all become digital I/O
      endif
         movwf   adcon1
    endif

  ifdef ancon0
         dbankif ancon0
         loadk8  ancon0, b'11111111'
    endif
  ifdef ancon1
         dbankif ancon1
         loadk8  ancon1, b'00111111'
    endif

  ifdef ansel
         dbankif ansel
         clrf    ansel       ;all analog input lines become digital I/O
    endif
  ifdef ansela
         dbankif ansela
         clrf    ansela
    endif
  ifdef anselb
         dbankif anselb
         clrf    anselb
    endif
  ifdef anselc
         dbankif anselc
         clrf    anselc
    endif
  ifdef anseld
         dbankif anseld
         clrf    anseld
    endif
  ifdef ansele
         dbankif ansele
         clrf    ansele
    endif
  ifdef anself
         dbankif anself
         clrf    anself
    endif
  ifdef anselg
         dbankif anselg
         clrf    anselg
    endif
  ifdef anselh
         dbankif anselh
         clrf    anselh
    endif
;
;   Disable the comparator inputs so that they become digital I/O lines if
;   this processor has comparators.  If the comparators are used, they
;   will be set up by a module for that purpose later.
;
  ifdef cmcon
         dbankif cmcon
         movlw   b'00000111'
                 ; XXXXX---  irrelevant when comparators off
                 ; -----111  disable the comparators
         movwf   cmcon
    endif

  ifdef cmcon0
         dbankif cmcon0
         movlw   b'00000111'
                 ; XXXXX---  irrelevant when comparators off
                 ; -----111  disable the comparators
         movwf   cmcon0
    endif
;
;   Globally enable the internal weak pullups if any were requested with
;   /INBIT directives.  The pullups will be individually enabled in the
;   per-port section later as apporpriate.
;
  ifdef portbpullups
         error   "PORTBPULLUPS symbol no longer used.  Use PUP option of /INBIT."
    endif

pullups_all set  0           ;init to no pullups requested for any ports
  ifdef val_pullupa
pullups_all set  pullups_all | val_pullupa
    endif
  ifdef val_pullupb
pullups_all set  pullups_all | val_pullupb
    endif
  ifdef val_pullupc
pullups_all set  pullups_all | val_pullupc
    endif
  ifdef val_pullupd
pullups_all set  pullups_all | val_pullupd
    endif
  ifdef val_pullupe
pullups_all set  pullups_all | val_pullupe
    endif
  ifdef val_pullupf
pullups_all set  pullups_all | val_pullupf
    endif
  ifdef val_pullupg
pullups_all set  pullups_all | val_pullupg
    endif
  ifdef val_pulluph
pullups_all set  pullups_all | val_pulluph
    endif
  ifdef val_pullupj
pullups_all set  pullups_all | val_pullupj
    endif

  ifdef option_reg
    if pullups_all
         setreg  b'00011111', option_reg
                 ; 0-------  globally enable passive pullups
                 ; -0------  interrupt on falling edge of RB0
                 ; --0-----  timer 0 driven from instruction clock
                 ; ---1----  falling RA4 edge for timer 0 inc (not used)
                 ; ----1---  assign prescaler to watchdog timer
                 ; -----111  select maximum watchdog presacler (128)
      else
         setreg  b'10011111', option_reg
                 ; 1-------  globally disable passive pullups
                 ; -0------  interrupt on falling edge of RB0
                 ; --0-----  timer 0 driven from instruction clock
                 ; ---1----  falling RA4 edge for timer 0 inc (not used)
                 ; ----1---  assign prescaler to watchdog timer
                 ; -----111  select maximum watchdog presacler (128)
      endif
    endif                    ;end of OPTION_REG exists

  if fam_18                  ;18 family PIC ?
    if val_pullupb
      ifdef rbpu
         bcf     intcon2, rbpu ;enable the passive pullups
        endif
      ifdef rabpu
         bcf     intcon2, rabpu ;enable the passive pullups
        endif
      else
      ifdef rbpu
         bsf     intcon2, rbpu ;disable the passive pullups
        endif
      ifdef rabpu
         bsf     intcon2, rabpu ;disable the passive pullups
        endif
      endif
    endif                    ;end of 18 family PIC case
;
;   Initialize the I/O ports according to how each of the bits was declared
;   with the /INBIT and /OUTBIT preprocessor directives.
;
/loop with pcode from [ccode 'A'] to [ccode 'J']
  /var local p string        ;port letter, upper case
  /var local s string        ;one output file line

  /set p [char pcode]
  /write "         ;"
  /write "         ;   Initialize port " p " if it exists."
  /write "         ;"
  ifdef port[chars p]
    if val_pullup[chars p] & ~val_tris[chars p]
  /write '         error   "Pullup requested on a port ' p ' output bit."'
      endif
    if val_pullup[chars p] & ~pullups_port[chars p]
  /write '         error   "Port ' p ' pullup requested that is not available."'
      endif
    if (val_pullup[chars p] != 0) && ((pullups_port[chars p] & h'80000000') != 0)
      if pullups_port[chars p] & h'7FFFFFFF' & (~val_pullup[chars p]) & val_tris[chars p]
  /write '         error   "Only some port ' p ' pullups enabled, must be all or none."'
        endif
      endif
    ifdef wpu[chars p]
         setreg  val_pullup[chars p], wpu[chars p]
      endif
    ifdef lat[chars p]
         setreg  val_port[chars p], lat[chars p]
      else
         setreg  val_port[chars p], port[chars p]
      endif
    endif
  ifdef tris[chars p]
         setreg  val_tris[chars p], tris[chars p]
    endif
  /endloop                   ;back to initialize next port
;
;   Initialize other state managed by this module.
;
         leaverest
